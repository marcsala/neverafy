import React, { useState } from 'react';\n\ninterface Product {\n  id: number;\n  name: string;\n  quantity: string;\n  expiryDate: string;\n  daysLeft: number;\n}\n\ninterface FridgeViewProps {\n  products: Product[];\n  onUpdateProducts: (products: Product[]) => void;\n  onBack: () => void;\n  isMobile: boolean;\n}\n\nconst FridgeView: React.FC<FridgeViewProps> = ({ products, onUpdateProducts, onBack, isMobile }) => {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [swipingProductId, setSwipingProductId] = useState<number | null>(null);\n  const [touchStart, setTouchStart] = useState<number | null>(null);\n  const [touchEnd, setTouchEnd] = useState<number | null>(null);\n\n  const getExpiryBadge = (daysLeft: number) => {\n    if (daysLeft < 1) return { class: 'urgent', text: 'Hoy', bgColor: 'bg-red-50', textColor: 'text-red-600' };\n    if (daysLeft === 1) return { class: 'urgent', text: 'Mañana', bgColor: 'bg-red-50', textColor: 'text-red-600' };\n    if (daysLeft < 4) return { class: 'warning', text: 'Pronto', bgColor: 'bg-amber-50', textColor: 'text-amber-600' };\n    return { class: 'safe', text: 'Fresco', bgColor: 'bg-green-50', textColor: 'text-green-600' };\n  };\n\n  const handleAddProduct = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    \n    const productName = formData.get('product-name') as string;\n    const expiryDate = formData.get('expiry-date') as string;\n    const quantity = formData.get('quantity') as string;\n    \n    const today = new Date();\n    const expiry = new Date(expiryDate);\n    const daysLeft = Math.ceil((expiry.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n    \n    const newProduct: Product = {\n      id: Date.now(),\n      name: productName,\n      quantity: quantity,\n      expiryDate: expiryDate,\n      daysLeft: daysLeft\n    };\n    \n    onUpdateProducts([...products, newProduct]);\n    setIsAddModalOpen(false);\n    event.currentTarget.reset();\n  };\n\n  const handleEditProduct = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!editingProduct) return;\n\n    const formData = new FormData(event.currentTarget);\n    const productName = formData.get('product-name') as string;\n    const expiryDate = formData.get('expiry-date') as string;\n    const quantity = formData.get('quantity') as string;\n    \n    const today = new Date();\n    const expiry = new Date(expiryDate);\n    const daysLeft = Math.ceil((expiry.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n    \n    const updatedProduct: Product = {\n      ...editingProduct,\n      name: productName,\n      quantity: quantity,\n      expiryDate: expiryDate,\n      daysLeft: daysLeft\n    };\n    \n    const updatedProducts = products.map(p => p.id === editingProduct.id ? updatedProduct : p);\n    onUpdateProducts(updatedProducts);\n    setIsEditModalOpen(false);\n    setEditingProduct(null);\n  };\n\n  const handleDeleteProduct = (productId: number) => {\n    const updatedProducts = products.filter(p => p.id !== productId);\n    onUpdateProducts(updatedProducts);\n    setSwipingProductId(null);\n  };\n\n  const handleEditClick = (product: Product) => {\n    setEditingProduct(product);\n    setIsEditModalOpen(true);\n  };\n\n  // Touch handlers for swipe\n  const handleTouchStart = (e: React.TouchEvent, productId: number) => {\n    setTouchEnd(null);\n    setTouchStart(e.targetTouches[0].clientX);\n  };\n\n  const handleTouchMove = (e: React.TouchEvent, productId: number) => {\n    setTouchEnd(e.targetTouches[0].clientX);\n  };\n\n  const handleTouchEnd = (productId: number) => {\n    if (!touchStart || !touchEnd) return;\n    \n    const distance = touchStart - touchEnd;\n    const isLeftSwipe = distance > 50;\n    const isRightSwipe = distance < -50;\n\n    if (isLeftSwipe) {\n      setSwipingProductId(productId);\n    } else if (isRightSwipe) {\n      setSwipingProductId(null);\n    }\n  };\n\n  const today = new Date().toISOString().split('T')[0];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={onBack}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <svg className=\"w-6 h-6 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <h1 className=\"text-xl font-semibold text-gray-900\">Mi Nevera</h1>\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            {products.length} productos\n          </div>\n        </div>\n      </div>\n\n      {/* Products Grid */}\n      <div className=\"p-4\">\n        {products.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <div className=\"w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-10 h-10 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Tu nevera está vacía</h3>\n            <p className=\"text-gray-500 mb-6\">Añade productos para empezar a gestionar tu nevera inteligente</p>\n            <button\n              onClick={() => setIsAddModalOpen(true)}\n              className=\"bg-blue-600 text-white px-6 py-3 rounded-xl font-semibold hover:bg-blue-700 transition-colors\"\n            >\n              Añadir primer producto\n            </button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {products.map((product) => {\n              const badge = getExpiryBadge(product.daysLeft);\n              const isSwipeOpen = swipingProductId === product.id;\n              \n              return (\n                <div key={product.id} className=\"relative\">\n                  {/* Swipe Background - Solo en móvil */}\n                  {isMobile && (\n                    <div className=\"absolute inset-0 bg-red-500 rounded-xl flex items-center justify-end pr-4\">\n                      <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                      </svg>\n                    </div>\n                  )}\n                  \n                  {/* Product Card */}\n                  <div\n                    className={`bg-white rounded-xl p-4 shadow-sm border border-gray-100 cursor-pointer transform transition-transform duration-200 ${\n                      isSwipeOpen ? 'translate-x-[-80px]' : 'translate-x-0'\n                    }`}\n                    onClick={() => !isMobile && handleEditClick(product)}\n                    onTouchStart={isMobile ? (e) => handleTouchStart(e, product.id) : undefined}\n                    onTouchMove={isMobile ? (e) => handleTouchMove(e, product.id) : undefined}\n                    onTouchEnd={isMobile ? () => handleTouchEnd(product.id) : undefined}\n                  >\n                    <div className=\"flex justify-between items-start mb-3\">\n                      <div className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${\n                        badge.bgColor\n                      } ${badge.textColor}`}>\n                        {badge.text}\n                      </div>\n                      \n                      {/* Desktop Actions */}\n                      {!isMobile && (\n                        <div className=\"flex space-x-2\">\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleEditClick(product);\n                            }}\n                            className=\"p-1 hover:bg-gray-100 rounded transition-colors\"\n                          >\n                            <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                            </svg>\n                          </button>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleDeleteProduct(product.id);\n                            }}\n                            className=\"p-1 hover:bg-red-100 rounded transition-colors group\"\n                          >\n                            <svg className=\"w-4 h-4 text-gray-400 group-hover:text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                            </svg>\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <h3 className=\"font-semibold text-gray-900 mb-2 text-lg\">{product.name}</h3>\n                    <div className=\"text-sm text-gray-500 mb-3\">{product.quantity}</div>\n                    \n                    <div className=\"flex justify-between items-center text-sm\">\n                      <div className=\"text-gray-400\">\n                        {new Date(product.expiryDate).toLocaleDateString('es-ES', {\n                          day: 'numeric',\n                          month: 'short'\n                        })}\n                      </div>\n                      <div className=\"font-medium text-gray-600\">\n                        {product.daysLeft > 0 ? `${product.daysLeft} días` : 'Vencido'}\n                      </div>\n                    </div>\n                    \n                    {/* Mobile tap to edit indicator */}\n                    {isMobile && (\n                      <div className=\"mt-3 pt-3 border-t border-gray-100\">\n                        <div className=\"text-xs text-gray-400 text-center\">Desliza ← para eliminar • Toca para editar</div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Mobile Delete Button */}\n                  {isMobile && isSwipeOpen && (\n                    <button\n                      onClick={() => handleDeleteProduct(product.id)}\n                      className=\"absolute right-4 top-1/2 transform -translate-y-1/2 bg-red-500 text-white p-3 rounded-full shadow-lg\"\n                    >\n                      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                      </svg>\n                    </button>\n                  )\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Floating Add Button */}\n      {products.length > 0 && (\n        <button\n          onClick={() => setIsAddModalOpen(true)}\n          className=\"fixed bottom-6 right-6 bg-blue-600 text-white w-14 h-14 rounded-full shadow-lg flex items-center justify-center hover:bg-blue-700 transition-colors z-30\"\n          style={{ bottom: isMobile ? '100px' : '24px' }}\n        >\n          <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n          </svg>\n        </button>\n      )}\n\n      {/* Add Product Modal */}\n      {isAddModalOpen && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-end md:items-center justify-center z-50\">\n          <div className=\"bg-white w-full max-w-md rounded-t-3xl md:rounded-3xl max-h-[80vh] overflow-y-auto\">\n            <div className=\"p-6 text-center relative\">\n              <div className=\"w-10 h-1 bg-gray-300 rounded-full mx-auto mb-5 md:hidden\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Añadir producto</h3>\n              <button\n                onClick={() => setIsAddModalOpen(false)}\n                className=\"absolute top-6 right-6 w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-gray-500 hover:text-gray-700 transition-colors\"\n              >\n                ×\n              </button>\n            </div>\n            \n            <div className=\"px-6 pb-6\">\n              <form onSubmit={handleAddProduct} className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    Nombre del producto\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"product-name\"\n                    className=\"w-full h-13 border border-gray-300 rounded-xl px-4 text-base bg-white focus:outline-none focus:border-blue-600 transition-colors\"\n                    style={{height: '52px'}}\n                    placeholder=\"Ej: Leche, Tomates, Yogurt...\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    Fecha de caducidad\n                  </label>\n                  <input\n                    type=\"date\"\n                    name=\"expiry-date\"\n                    min={today}\n                    className=\"w-full h-13 border border-gray-300 rounded-xl px-4 text-base bg-white focus:outline-none focus:border-blue-600 transition-colors\"\n                    style={{height: '52px'}}\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    Cantidad\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"quantity\"\n                    className=\"w-full h-13 border border-gray-300 rounded-xl px-4 text-base bg-white focus:outline-none focus:border-blue-600 transition-colors\"\n                    style={{height: '52px'}}\n                    placeholder=\"Ej: 1 litro, 500g, 6 unidades...\"\n                    required\n                  />\n                </div>\n                \n                <button\n                  type=\"submit\"\n                  className=\"w-full h-13 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 transition-colors mt-4\"\n                  style={{height: '52px'}}\n                >\n                  Añadir a nevera\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Edit Product Modal */}\n      {isEditModalOpen && editingProduct && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-end md:items-center justify-center z-50\">\n          <div className=\"bg-white w-full max-w-md rounded-t-3xl md:rounded-3xl max-h-[80vh] overflow-y-auto\">\n            <div className=\"p-6 text-center relative\">\n              <div className=\"w-10 h-1 bg-gray-300 rounded-full mx-auto mb-5 md:hidden\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Editar producto</h3>\n              <button\n                onClick={() => {\n                  setIsEditModalOpen(false);\n                  setEditingProduct(null);\n                }}\n                className=\"absolute top-6 right-6 w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-gray-500 hover:text-gray-700 transition-colors\"\n              >\n                ×\n              </button>\n            </div>\n            \n            <div className=\"px-6 pb-6\">\n              <form onSubmit={handleEditProduct} className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    Nombre del producto\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"product-name\"\n                    defaultValue={editingProduct.name}\n                    className=\"w-full h-13 border border-gray-300 rounded-xl px-4 text-base bg-white focus:outline-none focus:border-blue-600 transition-colors\"\n                    style={{height: '52px'}}\n                    placeholder=\"Ej: Leche, Tomates, Yogurt...\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    Fecha de caducidad\n                  </label>\n                  <input\n                    type=\"date\"\n                    name=\"expiry-date\"\n                    defaultValue={editingProduct.expiryDate}\n                    min={today}\n                    className=\"w-full h-13 border border-gray-300 rounded-xl px-4 text-base bg-white focus:outline-none focus:border-blue-600 transition-colors\"\n                    style={{height: '52px'}}\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    Cantidad\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"quantity\"\n                    defaultValue={editingProduct.quantity}\n                    className=\"w-full h-13 border border-gray-300 rounded-xl px-4 text-base bg-white focus:outline-none focus:border-blue-600 transition-colors\"\n                    style={{height: '52px'}}\n                    placeholder=\"Ej: 1 litro, 500g, 6 unidades...\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"flex space-x-3\">\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      setIsEditModalOpen(false);\n                      setEditingProduct(null);\n                    }}\n                    className=\"flex-1 h-13 border border-gray-300 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-colors\"\n                    style={{height: '52px'}}\n                  >\n                    Cancelar\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"flex-1 h-13 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 transition-colors\"\n                    style={{height: '52px'}}\n                  >\n                    Guardar cambios\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FridgeView;